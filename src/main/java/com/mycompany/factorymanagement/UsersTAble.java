/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.factorymanagement;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author login
 */
public class UsersTAble extends javax.swing.JFrame {

    ConnectionClass connectionClass = ConnectionClass.getInstance();
    ArrayList<EmployeeClass> userData = new ArrayList<>();
    int selectedRow;
    int role;
    EmployeeClass adminData = new EmployeeClass();

    /**
     * Creates new form UsersTAble
     */
    public UsersTAble() {
        initComponents();
        createTable();
    }

    public UsersTAble(EmployeeClass adminData) {
        initComponents();
        createTable();
        this.adminData = adminData;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(216, 216, 250));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jButton1.setText("Go to home ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addGap(59, 59, 59))
        );

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AdminPanel admin = new AdminPanel(adminData);
        admin.setVisible(true);
        this.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        try {
            // TODO add your handling code here:
            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            selectedRow = table.getSelectedRow();
            String i = dtm.getValueAt(selectedRow, 0).toString();
            //            System.out.println("ID is " + i);

            EmployeeClass data = new EmployeeClass();
            data.setId(Integer.parseInt(dtm.getValueAt(selectedRow, 0).toString()));
            data.setName(dtm.getValueAt(selectedRow, 1).toString());
            data.setEmail(dtm.getValueAt(selectedRow, 2).toString());
            String role = dtm.getValueAt(selectedRow, 3).toString();
            if (role.equals("Admin")) {
                data.setRole(1);
            } else if (role.equals("Manager")) {
                data.setRole(2);
            } else if (role.equals("ForeMan")) {
                data.setRole(3);
            }
            data.setJoiningDate(dtm.getValueAt(selectedRow, 4).toString());

            String sql = "SELECT * FROM users WHERE ID=? ";
            PreparedStatement ps = connectionClass.connection.prepareStatement(sql);
            ps.setInt(1, data.getId());
            //            ps.setInt(2, 1);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                data.setAge(rs.getInt("age"));
                data.setAddress(rs.getString("Address"));
                data.setPassword(rs.getString("password"));
                data.setContactNumber(rs.getString("contactNumber"));
                //                data.setAdharNumber(rs.getString("adharNumber"));

            }
            AddEmployee employee = new AddEmployee( adminData,data ,false);
            employee.setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(UsersTAble.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseClicked

    private void tableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsersTAble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsersTAble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsersTAble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsersTAble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsersTAble().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void createTable() {
        String statement = "SELECT * FROM users WHERE NOT role=1";
        try {
            PreparedStatement ps = connectionClass.connection.prepareStatement(statement);
            ResultSet resultSet = ps.executeQuery();
            
            String[] headerName = {"ID", "Name", "emailId", "Role", "Joining Date"};
            DefaultTableModel model = new DefaultTableModel(null, headerName);
          table.setModel(model);
            while (resultSet.next()) {
                EmployeeClass data = new EmployeeClass();
                data.setId(resultSet.getInt("ID"));
                data.setName(resultSet.getString("name"));
//                    data.setLastName(resultSet.getString("LastName"));
                data.setEmail(resultSet.getString("email"));
                data.setRole(resultSet.getInt("role"));
                data.setJoiningDate(resultSet.getString("joiningDate"));
//                                        data.setFullname(data.getFirstName(), data.getLastName());
//
                userData.add(data);
            }

            Object[] row = new Object[5];
            for (int i = 0; i < userData.size(); i++) {
                row[0] = userData.get(i).getId();
                row[1] = userData.get(i).getName();
                row[2] = userData.get(i).getEmail();
//                row[3] = userData.get(i).getRole();
                role = userData.get(i).getRole();
                switch (role) {
                    case 1:
                        row[3] = "Admin";
                        break;
                    case 2:
                        row[3] = "Manager";
                        break;
                    case 3:
                        row[3] = "ForeMan";
                        break;
                    default:
                        break;
                }

                row[4] = userData.get(i).getJoiningDate();
                model.addRow(row);
//                    }

            }

        } catch (SQLException ex) {
            Logger.getLogger(EmployeeTable.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
